
--------------------------------------------------------
pour faire tourner l'application 
--------------------------------------------------------

1- s'assurer que vous avez deux namespaces 'uat' et 'prod' dans votre cluster, sinon les créer :
kubectl get ns

2- se placer dans un des répertoires de surcharge, par exemple:
git/k8s-java-display-platform-using-kustomization/overlays/prod

3- taper la commande:
kubectl apply -k .

4- je liste mes Pod pour m'assurer qu'ils sont démarrés. Je dois spécifier le namespace car les ressources sont attachées à un namespace (prod ou uat).
Pour le namespace prod, je tape : 
kubectl -n prod get po 

5- je prends un des Pods retournés et je regarde ses logs, pour m'assurer que l'appli spring boot a bien démarré : 
kubectl -n prod logs kustom-mywebapp-v1-7b4fdbf748-7kfzn

6A- faire tourner l'application via un port-forward

	6A-1 je fais un port-forward de mon Pod afin qu'il soit testable de l'extérieur du cluster : 
	kubectl -n prod port-forward kustom-mywebapp-v1-7b4fdbf748-7kfzn 8085:8085

        	il faut par contre se souvenir que l'application java écoute sur le port 8085.
 
	6A-2 je peux tester mon appli via un curl
	curl -X GET http://localhost:8085/display/console

6B- faire tourner l'application via le service NodePort 

	6B-1 récupérer l'adresse IP d'un des noeuds du cluster avec la commande :
	kubectl get nodes -o wide
	==> 192.168.49.2

	6B-2 dans le namespace concerné (ici prod), récupérer le NodePort du service qui expose le/les pods :
	kubectl -n prod get svc
        ==> 31200

	6B-3 dans un browser, taper l'adresse du [node-ip-address] + [nodePort]
	par exemple :
	curl -X GET http://192.168.49.2:31200/display/console

-----------------------------------------------------------------------------
comprendre les mécanismes
----------------------------------------------------------------------------

même si ça ne correspond pas à ce projet précisément, cela explique les grands principes de la feature kustomize : 
https://docs.google.com/document/d/13yB_gWyQcNvA21WVRhNRUmVZRQ8p5P-sJELcSGU51lY/edit#heading=h.gp30xh4i1kai

sur ce projet précisément, pour comprendre le fonctionnement : 
1- observer comment sont rédigées les specs yaml, nottament dans le répetoire /overlays/
2- regarder comment la spec est réellement créée côté cluster par kubernetes.
	A) par exemple, je récupère le nom du Service démarré dans le namespace prod :
        kubectl -n prod get svc 
        ==> kustom-mywebapp-v1
	B) et je regarde sa spec côté cluster :
        kubectl -n prod get svc kustom-mywebapp-v1 -o yaml


 


















